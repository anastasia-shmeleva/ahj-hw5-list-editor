(()=>{"use strict";var e,t,r,n,o,i,c,a={341:(e,t,r)=>{function n(e){if(!1===e||null==e)return document.createTextNode("");if(!0===e||"string"==typeof e||"number"==typeof e)return document.createTextNode(e);if(Array.isArray(e)){const t=document.createDocumentFragment();return e.forEach((e=>{const r=n(e);t.appendChild(r)})),t}const t=document.createElement(e.block);[].concat(e.cls).filter(Boolean).forEach((e=>t.classList.add(e)));const r=n(e.content);return t.appendChild(r),t}r(177);const o=e=>({block:"tr",cls:"table__group",content:e.map((e=>({block:"td",cls:"table__item",content:e})))}),i=()=>{const e=document.createElement("button");e.className="btn__update",e.addEventListener("click",(e=>{const t=document.querySelector(".popup"),r=e.target.closest(".table__group").querySelectorAll(".table__item");t.querySelector(".title__input").value=r[0].innerText,t.querySelector(".price__input").value=r[1].innerText,t.style.display="block"}));const t=document.createElement("button");t.className="btn__delete",t.addEventListener("click",(e=>{e.target.closest(".table__group").remove(),localStorage.removeItem(Object.keys(localStorage).find((t=>t===e.target.closest(".table__group").firstElementChild.innerText)))}));const r=document.createElement("td");return r.className="table__item",r.appendChild(e),r.appendChild(t),r},c=new class{constructor(e,t,r){"string"==typeof e&&(e=document.querySelector(e)),this.table=e,this.popup=document.querySelector(".popup"),this.tooltip=r,this.addBtn=t,this.saveBtn=this.popup.querySelector(".btn__save"),this.cancelBtn=this.popup.querySelector(".btn__cancel"),this.onAdd=this.onAdd.bind(this),this.onSave=this.onSave.bind(this),this.onCancel=this.onCancel.bind(this),this.addBtn.addEventListener("click",this.onAdd),this.saveBtn.addEventListener("click",this.onSave),this.cancelBtn.addEventListener("click",this.onCancel)}render(){if(localStorage.length>1){this.table.style.display="table";const e=document.createElement("tbody");this.table.appendChild(e),Object.entries(localStorage).forEach((e=>{if("loglevel:webpack-dev-server"===e[0])return;const t=n(o([e[0],e[1]]));this.table.querySelector("tbody").appendChild(t);const r=i();this.table.querySelector("tbody").lastElementChild.appendChild(r)}))}}onAdd(){this.popup.style.display="block"}onSave(){const e=this.popup.querySelector(".title__input").value,t=this.popup.querySelector(".price__input").value;if(this.popup.querySelector(".title__input").validity.valueMissing)return void this.tooltip.addTooltip("Введите название");if(this.popup.querySelector(".price__input").validity.valueMissing)return void this.tooltip.addTooltip("Введите стоимость");if(this.popup.querySelector(".price__input").value<1)return void this.tooltip.addTooltip("Стоимость должна быть больше нуля");if(1===this.table.children.length){this.table.style.display="table";const e=document.createElement("tbody");this.table.appendChild(e)}const r=n(o([e,t]));this.table.querySelector("tbody").appendChild(r);const c=i();this.table.querySelector("tbody").lastElementChild.appendChild(c),this.onCancel(),localStorage.setItem(e,t)}onCancel(){this.popup.style.display="none",this.popup.querySelector(".title__input").value="",this.popup.querySelector(".price__input").value=""}}(".table",document.querySelector(".btn__add"),new class{constructor(){this.tooltips=[]}addTooltip(e){const t=performance.now(),r=document.createElement("div");return r.className="form-error",r.textContent=e,this.tooltips.push({id:t,tooltip:r}),document.querySelector(".popup__main").appendChild(r),setTimeout((()=>this.removeTooltip(t)),1e4),t}removeTooltip(e){const t=this.tooltips.findIndex((t=>t.id===e));-1!==t&&(this.tooltips[t].tooltip.remove(),this.tooltips.splice(t,1))}});c.render(),window.table=c},783:(e,t,r)=>{var n=r(618),o=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(s(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.addEventListener("error",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function d(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&l(e)}))}function s(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,u,p=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=p(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return c.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);s(o)&&!0!==t.visited&&o&&(l(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},l={};function d(e){if(l[e])return l[e].exports;var t=l[e]={id:e,exports:{}},r={id:e,module:t,factory:a[e],require:d};return d.i.forEach((function(e){e(r)})),t=r.module,r.factory.call(t.exports,t,t.exports,r.require),t.exports}d.m=a,d.c=l,d.i=[],d.hu=e=>e+"."+d.h()+".hot-update.js",d.miniCssF=e=>"main.css",d.hmrF=()=>"main."+d.h()+".hot-update.json",d.h=()=>"c6f12dffd27437551a99",d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",d.l=(r,n,o)=>{if(e[r])e[r].push(n);else{var i,c;if(void 0!==o)for(var a=document.getElementsByTagName("script"),l=0;l<a.length;l++){var s=a[l];if(s.getAttribute("src")==r||s.getAttribute("data-webpack")==t+o){i=s;break}}i||(c=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,d.nc&&i.setAttribute("nonce",d.nc),i.setAttribute("data-webpack",t+o),i.src=r),e[r]=[n];var u=(t,n)=>{i.onerror=i.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=u.bind(null,i.onerror),i.onload=u.bind(null,i.onload),c&&document.head.appendChild(i)}},(()=>{var e,t,r,n,o={},i=d.c,c=[],a=[],l="idle";function s(e){l=e;for(var t=0;t<a.length;t++)a[t].call(null,e)}function u(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return u(e)}))}function p(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return s("check"),d.hmrM().then((function(n){if(!n)return s(m()?"ready":"idle"),null;s("prepare");var o=[];return t=[],r=[],Promise.all(Object.keys(d.hmrC).reduce((function(e,t){return d.hmrC[t](n.c,n.r,n.m,e,r,o),e}),[])).then((function(){return u((function(){return e?h(e):(s("ready"),o)}))}))}))}function f(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},m();var t=r.map((function(t){return t(e)}));r=void 0;var o,i=t.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return s("abort"),Promise.resolve().then((function(){throw i[0]}));s("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),s("apply");var c=function(e){o||(o=e)},a=[];return t.forEach((function(e){if(e.apply){var t=e.apply(c);if(t)for(var r=0;r<t.length;r++)a.push(t[r])}})),o?(s("fail"),Promise.resolve().then((function(){throw o}))):n?h(e).then((function(e){return a.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(s("idle"),Promise.resolve(a))}function m(){if(n)return r||(r=[]),Object.keys(d.hmrI).forEach((function(e){n.forEach((function(t){d.hmrI[e](t,r)}))})),n=void 0,!0}d.hmrD=o,d.i.push((function(h){var m,v,y,g=h.module,b=function(r,n){var o=i[n];if(!o)return r;var a=function(t){if(o.hot.active){if(i[t]){var a=i[t].parents;-1===a.indexOf(n)&&a.push(n)}else c=[n],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),c=[];return r(t)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var p in r)Object.prototype.hasOwnProperty.call(r,p)&&"e"!==p&&Object.defineProperty(a,p,d(p));return a.e=function(e){return function(e){switch(l){case"ready":return s("prepare"),t.push(e),u((function(){s("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},a}(h.require,h.id);g.hot=(m=h.id,v=g,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==m,_requireSelf:function(){c=v.parents.slice(),e=m,d(m)},active:!0,accept:function(e,t){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){};else y._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":r=[],Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,r)})),s("ready");break;case"ready":Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:o[m]},e=void 0,y),g.parents=c,g.children=[],c=[],h.require=b})),d.hmrC={},d.hmrI={}})(),(()=>{var e;d.g.importScripts&&(e=d.g.location+"");var t=d.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),d.p=e})(),r=(e,t,r,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)r();else{var c=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=c,l.request=a,o.parentNode.removeChild(o),n(l)}},o.href=t,document.head.appendChild(o),o},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(c=r[n]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===t))return c}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var c;if((o=(c=i[n]).getAttribute("data-href"))===e||o===t)return c}},o=[],i=[],c=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),d.hmrC.miniCss=(e,t,a,l,s,u)=>{s.push(c),e.forEach((e=>{var t=d.miniCssF(e),c=d.p+t;const a=n(t,c);a&&l.push(new Promise(((t,n)=>{var l=r(e,c,(()=>{l.as="style",l.rel="preload",t()}),n);o.push(a),i.push(l)})))}))},(()=>{var e,t,r,n,o={179:0},i={};function c(e){return new Promise(((t,r)=>{i[e]=t;var n=d.p+d.hu(e),o=new Error;d.l(n,(t=>{if(i[e]){i[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),c=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+c+")",o.name="ChunkLoadError",o.type=n,o.request=c,r(o)}}))}))}function a(i){function c(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,c=o.chain,l=d.c[i];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<l.parents.length;s++){var u=l.parents[s],p=d.c[u];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(p.hot._acceptedDependencies[i]?(r[u]||(r[u]=[]),a(r[u],[i])):(delete r[u],t.push(u),n.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}d.f&&delete d.f.jsonpHmr,e=void 0;var l={},s=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in t)if(d.o(t,f)){var h,m=t[f],v=!1,y=!1,g=!1,b="";switch((h=m?c(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(v=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":i.onAccepted&&i.onAccepted(h),y=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(f in u[f]=m,a(s,h.outdatedModules),h.outdatedDependencies)d.o(h.outdatedDependencies,f)&&(l[f]||(l[f]=[]),a(l[f],h.outdatedDependencies[f]));g&&(a(s,[h.moduleId]),u[f]=p)}t=void 0;for(var _,E=[],w=0;w<s.length;w++){var S=s[w];d.c[S]&&d.c[S].hot._selfAccepted&&u[S]!==p&&!d.c[S].hot._selfInvalidated&&E.push({module:S,require:d.c[S].hot._requireSelf,errorHandler:d.c[S].hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=s.slice();n.length>0;){var i=n.pop(),c=d.c[i];if(c){var a={},u=c.hot._disposeHandlers;for(w=0;w<u.length;w++)u[w].call(null,a);for(d.hmrD[i]=a,c.hot.active=!1,delete d.c[i],delete l[i],w=0;w<c.children.length;w++){var p=d.c[c.children[w]];p&&(e=p.parents.indexOf(i))>=0&&p.parents.splice(e,1)}}}for(var f in l)if(d.o(l,f)&&(c=d.c[f]))for(_=l[f],w=0;w<_.length;w++)t=_[w],(e=c.children.indexOf(t))>=0&&c.children.splice(e,1)},apply:function(e){for(var t in u)d.o(u,t)&&(d.m[t]=u[t]);for(var r=0;r<n.length;r++)n[r](d);for(var o in l)if(d.o(l,o)){var c=d.c[o];if(c){_=l[o];for(var a=[],p=[],f=0;f<_.length;f++){var h=_[f],m=c.hot._acceptedDependencies[h];if(m){if(-1!==a.indexOf(m))continue;a.push(m),p.push(h)}}for(var v=0;v<a.length;v++)try{a[v].call(null,_)}catch(t){i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[v],error:t}),i.ignoreErrored||e(t)}}}for(var y=0;y<E.length;y++){var g=E[y],b=g.module;try{g.require(b)}catch(t){if("function"==typeof g.errorHandler)try{g.errorHandler(t)}catch(r){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:r,originalError:t}),i.ignoreErrored||e(r),e(t)}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:b,error:t}),i.ignoreErrored||e(t)}}return s}}}self.webpackHotUpdateajs=(e,r,o)=>{for(var c in r)d.o(r,c)&&(t[c]=r[c]);o&&n.push(o),i[e]&&(i[e](),i[e]=void 0)},d.hmrI.jsonp=function(e,o){t||(t={},n=[],r=[],o.push(a)),d.o(t,e)||(t[e]=d.m[e])},d.hmrC.jsonp=function(i,l,s,u,p,f){p.push(a),e={},r=l,t=s.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],i.forEach((function(t){d.o(o,t)&&void 0!==o[t]&&(u.push(c(t)),e[t]=!0)})),d.f&&(d.f.jsonpHmr=function(t,r){e&&!d.o(e,t)&&d.o(o,t)&&void 0!==o[t]&&(r.push(c(t)),e[t]=!0)})},d.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(d.p+d.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),d(341)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2FwcC9saWIvZW5naW5lL2VuZ2luZS5qcyIsIndlYnBhY2s6Ly9hanMvLi9zcmMvYXBwL2NvbXBvbmVudHMvR29vZHMvR29vZHMudGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2FwcC9jb21wb25lbnRzL0dvb2RzL2l0ZW1CdG5zLmpzIiwid2VicGFjazovL2Fqcy8uL3NyYy9hcHAvYXBwLmpzIiwid2VicGFjazovL2Fqcy8uL3NyYy9hcHAvY29tcG9uZW50cy9UYWJsZS9UYWJsZS5qcyIsIndlYnBhY2s6Ly9hanMvLi9zcmMvYXBwL2NvbXBvbmVudHMvVG9vbHRpcC9Ub29sdGlwLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvbm9ybWFsaXplLXVybC5qcyIsIndlYnBhY2s6Ly9hanMvLi9zcmMvY3NzL3N0eWxlLmNzcz82YjdiIiwid2VicGFjazovL2Fqcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IHVwZGF0ZSBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2dldCB1cGRhdGUgbWFuaWZlc3QgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2hvdCBtb2R1bGUgcmVwbGFjZW1lbnQiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsImNyZWF0ZVN0eWxlc2hlZXQiLCJmaW5kU3R5bGVzaGVldCIsIm9sZFRhZ3MiLCJuZXdUYWdzIiwiYXBwbHlIYW5kbGVyIiwiZW5naW5lIiwiYmxvY2siLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiQXJyYXkiLCJpc0FycmF5IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZm9yRWFjaCIsImIiLCJlbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwiY29uY2F0IiwiY2xzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImNsYXNzTGlzdCIsImFkZCIsImNvbnRlbnQiLCJnb29kcyIsIm1hcCIsInRpdGxlIiwiYnRuVXBkYXRlIiwiY2xhc3NOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwb3B1cCIsInF1ZXJ5U2VsZWN0b3IiLCJub2RlcyIsInRhcmdldCIsImNsb3Nlc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwidmFsdWUiLCJpbm5lclRleHQiLCJzdHlsZSIsImRpc3BsYXkiLCJidG5EZWxldGUiLCJyZW1vdmUiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiT2JqZWN0Iiwia2V5cyIsImZpbmQiLCJrZXkiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImJ0bkNvbnRhaW5lciIsInRhYmxlIiwiY29uc3RydWN0b3IiLCJhZGRCdG4iLCJ0b29sdGlwIiwidGhpcyIsInNhdmVCdG4iLCJjYW5jZWxCdG4iLCJvbkFkZCIsImJpbmQiLCJvblNhdmUiLCJvbkNhbmNlbCIsInJlbmRlciIsImxlbmd0aCIsInRib2R5IiwiZW50cmllcyIsIml0ZW0iLCJnb29kIiwidGVtcGxhdGUiLCJidG5zIiwiaXRlbUJ0bnMiLCJsYXN0RWxlbWVudENoaWxkIiwicHJpY2UiLCJ2YWxpZGl0eSIsInZhbHVlTWlzc2luZyIsImFkZFRvb2x0aXAiLCJjaGlsZHJlbiIsInNldEl0ZW0iLCJ0b29sdGlwcyIsIm1lc3NhZ2UiLCJpZCIsInBlcmZvcm1hbmNlIiwibm93IiwidGV4dENvbnRlbnQiLCJwdXNoIiwic2V0VGltZW91dCIsInJlbW92ZVRvb2x0aXAiLCJyZW1vdmluZyIsImZpbmRJbmRleCIsInNwbGljZSIsIndpbmRvdyIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJjcmVhdGUiLCJub0RvY3VtZW50IiwicHJvdG90eXBlIiwibm9vcCIsInVwZGF0ZUNzcyIsImVsIiwidXJsIiwiaHJlZiIsInNwbGl0IiwiaXNVcmxSZXF1ZXN0IiwiaXNMb2FkZWQiLCJpbmRleE9mIiwidmlzaXRlZCIsIm5ld0VsIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiRGF0ZSIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwicmVsb2FkQWxsIiwiZWxlbWVudHMiLCJjYWxsIiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJjb25zb2xlIiwibG9nIiwiZm4iLCJ0aW1lb3V0IiwiZ2V0U2NyaXB0U3JjIiwic3JjIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxhc3RTY3JpcHRUYWciLCJmaWxlTWFwIiwic3BsaXRSZXN1bHQiLCJmaWxlbmFtZSIsIm1hcFJ1bGUiLCJyZWciLCJSZWdFeHAiLCJyZXBsYWNlIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9hZGVkIiwicmV0Iiwic3RyaXBXV1ciLCJzb21lIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkU3R5bGUiLCJsb2NhbHMiLCJqb2luIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJmdW5jdGlvbkNhbGwiLCJhcHBseSIsImNsZWFyVGltZW91dCIsInVybFN0cmluZyIsInRyaW0iLCJwcm90b2NvbCIsImNvbXBvbmVudHMiLCJob3N0IiwidG9Mb3dlckNhc2UiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsInBvcCIsImNzc1JlbG9hZCIsImhvdCIsImRpc3Bvc2UiLCJhY2NlcHQiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhlY09wdGlvbnMiLCJmYWN0b3J5IiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInJlcXVpcmUiLCJpIiwiaGFuZGxlciIsIm0iLCJjIiwiaHUiLCJjaHVua0lkIiwiaCIsIm1pbmlDc3NGIiwiaG1yRiIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJvIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwibCIsImRvbmUiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwicyIsImdldEF0dHJpYnV0ZSIsImNoYXJzZXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2IiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsInR5cGUiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiYmxvY2tpbmdQcm9taXNlcyIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwid2FpdEZvckJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2VyIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJFcnJvciIsImhtck0iLCJ1cGRhdGUiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsInVwZGF0ZWRNb2R1bGVzIiwiaG1yQyIsInByb21pc2VzIiwiciIsImludGVybmFsQXBwbHkiLCJob3RBcHBseSIsInJlc29sdmUiLCJyZXN1bHRzIiwiZXJyb3IiLCJlcnJvcnMiLCJyZXN1bHQiLCJyZXBvcnRFcnJvciIsImVyciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJsaXN0IiwiaG1ySSIsImhtckQiLCJtZSIsInJlcXVlc3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwid2FybiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9tYWluIiwiX3JlcXVpcmVTZWxmIiwic2xpY2UiLCJkZXAiLCJjYWxsYmFjayIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4IiwiaW52YWxpZGF0ZSIsImNoZWNrIiwic3RhdHVzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwicCIsImZ1bGxocmVmIiwicmVqZWN0IiwibGlua1RhZyIsInJlbCIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiY29kZSIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsInRhZyIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFnIiwibWluaUNzcyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiYXBwbHlIYW5kbGVycyIsInVwZGF0ZWRNb2R1bGVzTGlzdCIsImFzIiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiMTc5Iiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsImNoYWluIiwicXVldWVJdGVtIiwicGFyZW50SWQiLCJwYXJlbnQiLCJhZGRBbGxUb1NldCIsImEiLCJmIiwianNvbnBIbXIiLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwibmV3TW9kdWxlRmFjdG9yeSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJqIiwib3V0ZGF0ZWRNb2R1bGVJZCIsImVycm9ySGFuZGxlciIsImRlcGVuZGVuY3kiLCJkaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsImNhbGxiYWNrcyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiayIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImpzb25wIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iXSwibWFwcGluZ3MiOiJ1QkFBSUEsRUFDQUMsRUNEQUMsRUEyQkFDLEVBd0JBQyxFQUNBQyxFQUNBQyxFLGlCQ3JEVyxTQUFTQyxFQUFPQyxHQUM3QixJQUFlLElBQVZBLFNBQXFCQSxFQUN4QixPQUFPQyxTQUFTQyxlQUFlLElBR2pDLElBQWUsSUFBVkYsR0FBcUMsaUJBQVZBLEdBQXlDLGlCQUFWQSxFQUM3RCxPQUFPQyxTQUFTQyxlQUFlRixHQUdqQyxHQUFJRyxNQUFNQyxRQUFRSixHQUFRLENBQ3hCLE1BQU1LLEVBQVdKLFNBQVNLLHlCQVExQixPQU5BTixFQUFNTyxTQUFTQyxJQUNiLE1BQU1DLEVBQVVWLEVBQU9TLEdBRXZCSCxFQUFTSyxZQUFZRCxNQUdoQkosRUFHVCxNQUFNSSxFQUFVUixTQUFTVSxjQUFjWCxFQUFNQSxPQUU3QyxHQUFHWSxPQUFPWixFQUFNYSxLQUFLQyxPQUFPQyxTQUFTUixTQUFTTSxHQUFRSixFQUFRTyxVQUFVQyxJQUFJSixLQUU1RSxNQUFNSyxFQUFVbkIsRUFBT0MsRUFBTWtCLFNBSTdCLE9BRkFULEVBQVFDLFlBQVlRLEdBRWJULEUsT0M3QlQsTUFVQSxFQVZ1QlUsSUFBRCxDQUNwQm5CLE1BQU8sS0FDUGEsSUFBSyxlQUNMSyxRQUFTQyxFQUFNQyxLQUFLQyxJQUFELENBQ2pCckIsTUFBTyxLQUNQYSxJQUFLLGNBQ0xLLFFBQVNHLFFDNEJiLEVBbENpQixLQUNmLE1BZ0JNQyxFQUFZckIsU0FBU1UsY0FBYyxVQUN6Q1csRUFBVUMsVUFBWSxjQUN0QkQsRUFBVUUsaUJBQWlCLFNBbEJUQyxJQUNoQixNQUFNQyxFQUFRekIsU0FBUzBCLGNBQWMsVUFDL0JDLEVBQVFILEVBQUVJLE9BQU9DLFFBQVEsaUJBQWlC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RUFBb0IvSCxJQUFXLE1BRzdCVixFQUFvQjRKLElBQ3ZCNUosRUFBb0I0SixFQUFFQyxTQUFXLFNBQVVuSixFQUFTb0QsR0FFbEQyRSxJQUNDekksRUFBb0JpQixFQUFFd0gsRUFBcUIvSCxJQUM1Q1YsRUFBb0JpQixFQUFFNEgsRUFBaUJuSSxTQUNWWixJQUE3QitJLEVBQWdCbkksS0FFaEJvRCxFQUFTbkosS0FBS3FPLEVBQWdCdEksSUFDOUIrSCxFQUFvQi9ILElBQVcsTUFNbkNWLEVBQW9CeUQsS0FBTyxLQUMxQixHQUFxQixvQkFBVnNJLE1BQXVCLE1BQU0sSUFBSXZJLE1BQU0sc0NBQ2xELE9BQU91SSxNQUFNL0wsRUFBb0JxSCxFQUFJckgsRUFBb0JhLFFBQVF3QyxNQUFNMkksSUFDdEUsR0FBdUIsTUFBcEJBLEVBQVNsRixPQUFaLENBQ0EsSUFBSWtGLEVBQVNDLEdBQUksTUFBTSxJQUFJekksTUFBTSxtQ0FBcUN3SSxFQUFTRSxZQUMvRSxPQUFPRixFQUFTRyxhLEdDcmRsQm5NLEVBQW9CLE0iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcImFqczpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5KSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gZm4oZXZlbnQpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJ2YXIgY3JlYXRlU3R5bGVzaGVldCA9IChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gKG9wdGlvbnMpID0+IHtcblx0cmV0dXJuIHsgZGlzcG9zZTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgb2xkVGFnID0gb2xkVGFnc1tpXTtcblx0XHRcdGlmKG9sZFRhZy5wYXJlbnROb2RlKSBvbGRUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRUYWcpO1xuXHRcdH1cblx0XHRvbGRUYWdzLmxlbmd0aCA9IDA7XG5cdH0sIGFwcGx5OiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IChjaHVua0lkcywgcmVtb3ZlZENodW5rcywgcmVtb3ZlZE1vZHVsZXMsIHByb21pc2VzLCBhcHBseUhhbmRsZXJzLCB1cGRhdGVkTW9kdWxlc0xpc3QpID0+IHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGNodW5rSWRzLmZvckVhY2goKGNodW5rSWQpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRjb25zdCBvbGRUYWcgPSBmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZik7XG5cdFx0aWYoIW9sZFRhZykgcmV0dXJuO1xuXHRcdHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHRhZyA9IGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsICgpID0+IHtcblx0XHRcdFx0dGFnLmFzID0gXCJzdHlsZVwiO1xuXHRcdFx0XHR0YWcucmVsID0gXCJwcmVsb2FkXCI7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0sIHJlamVjdCk7XG5cdFx0XHRvbGRUYWdzLnB1c2gob2xkVGFnKTtcblx0XHRcdG5ld1RhZ3MucHVzaCh0YWcpO1xuXHRcdH0pKTtcblx0fSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW5naW5lKGJsb2NrKSB7XG4gIGlmICgoYmxvY2sgPT09IGZhbHNlKSB8fCAoYmxvY2sgPT09IHVuZGVmaW5lZCkgfHwgKGJsb2NrID09PSBudWxsKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIH1cblxuICBpZiAoKGJsb2NrID09PSB0cnVlKSB8fCAodHlwZW9mIGJsb2NrID09PSAnc3RyaW5nJykgfHwgKHR5cGVvZiBibG9jayA9PT0gJ251bWJlcicpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGJsb2NrKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGJsb2NrKSkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgYmxvY2suZm9yRWFjaCgoYikgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGVuZ2luZShiKTtcblxuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH1cblxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChibG9jay5ibG9jayk7XG5cbiAgW10uY29uY2F0KGJsb2NrLmNscykuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goKGNscykgPT4gZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNscykpO1xuXG4gIGNvbnN0IGNvbnRlbnQgPSBlbmdpbmUoYmxvY2suY29udGVudCk7XG5cbiAgZWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcblxuICByZXR1cm4gZWxlbWVudDtcbn1cbiIsImNvbnN0IGdvb2RzVGVtcGxhdGUgPSAoZ29vZHMpID0+ICh7XG4gIGJsb2NrOiAndHInLFxuICBjbHM6ICd0YWJsZV9fZ3JvdXAnLFxuICBjb250ZW50OiBnb29kcy5tYXAoKHRpdGxlKSA9PiAoe1xuICAgIGJsb2NrOiAndGQnLFxuICAgIGNsczogJ3RhYmxlX19pdGVtJyxcbiAgICBjb250ZW50OiB0aXRsZSxcbiAgfSkpLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGdvb2RzVGVtcGxhdGU7XG4iLCJjb25zdCBpdGVtQnRucyA9ICgpID0+IHtcbiAgY29uc3QgdG9VcGRhdGUgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwJyk7XG4gICAgY29uc3Qgbm9kZXMgPSBlLnRhcmdldC5jbG9zZXN0KCcudGFibGVfX2dyb3VwJykucXVlcnlTZWxlY3RvckFsbCgnLnRhYmxlX19pdGVtJyk7XG5cbiAgICBwb3B1cC5xdWVyeVNlbGVjdG9yKCcudGl0bGVfX2lucHV0JykudmFsdWUgPSBub2Rlc1swXS5pbm5lclRleHQ7XG4gICAgcG9wdXAucXVlcnlTZWxlY3RvcignLnByaWNlX19pbnB1dCcpLnZhbHVlID0gbm9kZXNbMV0uaW5uZXJUZXh0O1xuXG4gICAgcG9wdXAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIH07XG5cbiAgY29uc3QgdG9EZWxldGUgPSAoZSkgPT4ge1xuICAgIGUudGFyZ2V0LmNsb3Nlc3QoJy50YWJsZV9fZ3JvdXAnKS5yZW1vdmUoKTtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpLmZpbmQoKGtleSkgPT4ga2V5ID09PSBlLnRhcmdldC5jbG9zZXN0KCcudGFibGVfX2dyb3VwJykuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0KSk7XG4gIH07XG5cbiAgLy8gVXBkYXRlXG4gIGNvbnN0IGJ0blVwZGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBidG5VcGRhdGUuY2xhc3NOYW1lID0gJ2J0bl9fdXBkYXRlJztcbiAgYnRuVXBkYXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9VcGRhdGUpO1xuXG4gIC8vIERlbGV0ZVxuICBjb25zdCBidG5EZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYnRuRGVsZXRlLmNsYXNzTmFtZSA9ICdidG5fX2RlbGV0ZSc7XG4gIGJ0bkRlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvRGVsZXRlKTtcblxuICBjb25zdCBidG5Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICBidG5Db250YWluZXIuY2xhc3NOYW1lID0gJ3RhYmxlX19pdGVtJztcbiAgYnRuQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ0blVwZGF0ZSk7XG4gIGJ0bkNvbnRhaW5lci5hcHBlbmRDaGlsZChidG5EZWxldGUpO1xuXG4gIHJldHVybiBidG5Db250YWluZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpdGVtQnRucztcbiIsImltcG9ydCBUYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvVGFibGUvVGFibGUnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcCc7XG5cbmNvbnN0IHRhYmxlID0gbmV3IFRhYmxlKCcudGFibGUnLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuX19hZGQnKSwgbmV3IFRvb2x0aXAoKSk7XG50YWJsZS5yZW5kZXIoKTtcblxud2luZG93LnRhYmxlID0gdGFibGU7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuaW1wb3J0IGVuZ2luZSBmcm9tICcuLi8uLi9saWIvZW5naW5lL2VuZ2luZSc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vR29vZHMvR29vZHMudGVtcGxhdGUnO1xuaW1wb3J0IGl0ZW1CdG5zIGZyb20gJy4uL0dvb2RzL2l0ZW1CdG5zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGUge1xuICBjb25zdHJ1Y3Rvcih0YWJsZSwgYWRkQnRuLCB0b29sdGlwKSB7XG4gICAgaWYgKHR5cGVvZiB0YWJsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YWJsZSk7XG4gICAgfVxuXG4gICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgIHRoaXMucG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAnKTtcbiAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuXG4gICAgdGhpcy5hZGRCdG4gPSBhZGRCdG47XG4gICAgdGhpcy5zYXZlQnRuID0gdGhpcy5wb3B1cC5xdWVyeVNlbGVjdG9yKCcuYnRuX19zYXZlJyk7XG4gICAgdGhpcy5jYW5jZWxCdG4gPSB0aGlzLnBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5idG5fX2NhbmNlbCcpO1xuXG4gICAgdGhpcy5vbkFkZCA9IHRoaXMub25BZGQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU2F2ZSA9IHRoaXMub25TYXZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNhbmNlbCA9IHRoaXMub25DYW5jZWwuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuYWRkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkFkZCk7XG4gICAgdGhpcy5zYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vblNhdmUpO1xuICAgIHRoaXMuY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNhbmNlbCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLnRhYmxlLnN0eWxlLmRpc3BsYXkgPSAndGFibGUnO1xuICAgICAgY29uc3QgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICAgdGhpcy50YWJsZS5hcHBlbmRDaGlsZCh0Ym9keSk7XG5cbiAgICAgIE9iamVjdC5lbnRyaWVzKGxvY2FsU3RvcmFnZSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbVswXSA9PT0gJ2xvZ2xldmVsOndlYnBhY2stZGV2LXNlcnZlcicpIHJldHVybjtcbiAgICAgICAgY29uc3QgZ29vZCA9IGVuZ2luZSh0ZW1wbGF0ZShbaXRlbVswXSwgaXRlbVsxXV0pKTtcbiAgICAgICAgdGhpcy50YWJsZS5xdWVyeVNlbGVjdG9yKCd0Ym9keScpLmFwcGVuZENoaWxkKGdvb2QpO1xuICAgICAgICBjb25zdCBidG5zID0gaXRlbUJ0bnMoKTtcbiAgICAgICAgdGhpcy50YWJsZS5xdWVyeVNlbGVjdG9yKCd0Ym9keScpLmxhc3RFbGVtZW50Q2hpbGQuYXBwZW5kQ2hpbGQoYnRucyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBvbkFkZCgpIHtcbiAgICB0aGlzLnBvcHVwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9XG5cbiAgb25TYXZlKCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5wb3B1cC5xdWVyeVNlbGVjdG9yKCcudGl0bGVfX2lucHV0JykudmFsdWU7XG4gICAgY29uc3QgcHJpY2UgPSB0aGlzLnBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wcmljZV9faW5wdXQnKS52YWx1ZTtcblxuICAgIGlmICh0aGlzLnBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy50aXRsZV9faW5wdXQnKS52YWxpZGl0eS52YWx1ZU1pc3NpbmcpIHtcbiAgICAgIHRoaXMudG9vbHRpcC5hZGRUb29sdGlwKCfQktCy0LXQtNC40YLQtSDQvdCw0LfQstCw0L3QuNC1Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucG9wdXAucXVlcnlTZWxlY3RvcignLnByaWNlX19pbnB1dCcpLnZhbGlkaXR5LnZhbHVlTWlzc2luZykge1xuICAgICAgdGhpcy50b29sdGlwLmFkZFRvb2x0aXAoJ9CS0LLQtdC00LjRgtC1INGB0YLQvtC40LzQvtGB0YLRjCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wcmljZV9faW5wdXQnKS52YWx1ZSA8IDEpIHtcbiAgICAgIHRoaXMudG9vbHRpcC5hZGRUb29sdGlwKCfQodGC0L7QuNC80L7RgdGC0Ywg0LTQvtC70LbQvdCwINCx0YvRgtGMINCx0L7Qu9GM0YjQtSDQvdGD0LvRjycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRhYmxlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy50YWJsZS5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlJztcbiAgICAgIGNvbnN0IHRib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKTtcbiAgICAgIHRoaXMudGFibGUuYXBwZW5kQ2hpbGQodGJvZHkpO1xuICAgIH1cblxuICAgIGNvbnN0IGdvb2QgPSBlbmdpbmUodGVtcGxhdGUoW3RpdGxlLCBwcmljZV0pKTtcbiAgICB0aGlzLnRhYmxlLnF1ZXJ5U2VsZWN0b3IoJ3Rib2R5JykuYXBwZW5kQ2hpbGQoZ29vZCk7XG5cbiAgICBjb25zdCBidG5zID0gaXRlbUJ0bnMoKTtcbiAgICB0aGlzLnRhYmxlLnF1ZXJ5U2VsZWN0b3IoJ3Rib2R5JykubGFzdEVsZW1lbnRDaGlsZC5hcHBlbmRDaGlsZChidG5zKTtcblxuICAgIHRoaXMub25DYW5jZWwoKTtcblxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRpdGxlLCBwcmljZSk7XG4gIH1cblxuICBvbkNhbmNlbCgpIHtcbiAgICB0aGlzLnBvcHVwLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5wb3B1cC5xdWVyeVNlbGVjdG9yKCcudGl0bGVfX2lucHV0JykudmFsdWUgPSAnJztcbiAgICB0aGlzLnBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wcmljZV9faW5wdXQnKS52YWx1ZSA9ICcnO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sdGlwIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50b29sdGlwcyA9IFtdO1xuICB9XG5cbiAgYWRkVG9vbHRpcChtZXNzYWdlKSB7XG4gICAgY29uc3QgaWQgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgIGNvbnN0IHRvb2x0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0b29sdGlwLmNsYXNzTmFtZSA9ICdmb3JtLWVycm9yJztcbiAgICB0b29sdGlwLnRleHRDb250ZW50ID0gbWVzc2FnZTtcblxuICAgIHRoaXMudG9vbHRpcHMucHVzaCh7XG4gICAgICBpZCxcbiAgICAgIHRvb2x0aXAsXG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX21haW4nKS5hcHBlbmRDaGlsZCh0b29sdGlwKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZW1vdmVUb29sdGlwKGlkKSwgMTAwMDApO1xuXG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgcmVtb3ZlVG9vbHRpcChpZCkge1xuICAgIGNvbnN0IHJlbW92aW5nID0gdGhpcy50b29sdGlwcy5maW5kSW5kZXgoKHRvb2x0aXApID0+IHRvb2x0aXAuaWQgPT09IGlkKTtcblxuICAgIGlmIChyZW1vdmluZyA9PT0gLTEpIHJldHVybjtcblxuICAgIHRoaXMudG9vbHRpcHNbcmVtb3ZpbmddLnRvb2x0aXAucmVtb3ZlKCk7XG4gICAgdGhpcy50b29sdGlwcy5zcGxpY2UocmVtb3ZpbmcsIDEpO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZSgnLi9ub3JtYWxpemUtdXJsJyk7XG5cbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJztcbnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB0aW1lKSB7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uQ2FsbCwgdGltZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKSB7XG4gIHZhciBzcmMgPSBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXTtcblxuICBpZiAoIXNyYykge1xuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICBzcmMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICB2YXIgbGFzdFNjcmlwdFRhZyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuXG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlTWFwKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKCcuanMnLCAnLmNzcycpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobWFwUnVsZSkge1xuICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoZmlsZW5hbWUsIFwiXFxcXC5qcyRcIiksICdnJyk7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdCgnPycpWzBdO1xuICB9XG5cbiAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZignLmNzcycpID4gLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgZWwudmlzaXRlZCA9IHRydWU7XG4gIHZhciBuZXdFbCA9IGVsLmNsb25lTm9kZSgpO1xuICBuZXdFbC5pc0xvYWRlZCA9IGZhbHNlO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG5cbiAgaWYgKGVsLm5leHRTaWJsaW5nKSB7XG4gICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGVsLm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld0VsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZiwge1xuICAgIHN0cmlwV1dXOiBmYWxzZVxuICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuXG4gIHNyYy5zb21lKGZ1bmN0aW9uICh1cmwpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKHNyYykgPiAtMSkge1xuICAgICAgcmV0ID0gdXJsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBnZXRSZWxvYWRVcmwoZWwuaHJlZiwgc3JjKTtcblxuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVwZGF0ZUNzcyhlbCwgdXJsKTtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXmh0dHBzPzovaS50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZygnbm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTJyk7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cblxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcblxuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gY3NzIHJlbG9hZCAlcycsIHNyYy5qb2luKCcgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWJvdW5jZSh1cGRhdGUsIDUwKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5mdW5jdGlvbiBub3JtYWxpemVVcmwocGF0aENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHBhdGhDb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgIGNhc2UgJy4uJzpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCBbXSkuam9pbignLycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmxTdHJpbmcpIHtcbiAgdXJsU3RyaW5nID0gdXJsU3RyaW5nLnRyaW0oKTtcblxuICBpZiAoL15kYXRhOi9pLnRlc3QodXJsU3RyaW5nKSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB1cmxTdHJpbmcuaW5kZXhPZignLy8nKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoJy8vJylbMF0gKyAnLy8nIDogJyc7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgJ2knKSwgJycpLnNwbGl0KCcvJyk7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCAnJyk7XG4gIGNvbXBvbmVudHNbMF0gPSAnJztcbiAgdmFyIHBhdGggPSBub3JtYWxpemVVcmwoY29tcG9uZW50cyk7XG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRoO1xufTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjMxMTI0OTU3NDgxXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi9ob21lL2FwcHZleW9yL3Byb2plY3RzL2Foai1odzUtbGlzdC1lZGl0b3Ivbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uaHUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIFwibWFpblwiICsgXCIuY3NzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+IFwibWFpbi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gXCJjNmYxMmRmZmQyNzQzNzU1MWE5OVwiIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsInZhciBjdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xudmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7XG5cbi8vIG1vZHVsZSBhbmQgcmVxdWlyZSBjcmVhdGlvblxudmFyIGN1cnJlbnRDaGlsZE1vZHVsZTtcbnZhciBjdXJyZW50UGFyZW50cyA9IFtdO1xuXG4vLyBzdGF0dXNcbnZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTtcbnZhciBjdXJyZW50U3RhdHVzID0gXCJpZGxlXCI7XG5cbi8vIHdoaWxlIGRvd25sb2FkaW5nXG52YXIgYmxvY2tpbmdQcm9taXNlcztcblxuLy8gVGhlIHVwZGF0ZSBpbmZvXG52YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7XG52YXIgcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkKSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaykge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHR9LFxuXHRcdGRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG5cdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG5cdFx0fSxcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcblx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG5cdFx0XHRcdFx0KHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChcblx0XHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvLyBpZ25vcmUgcmVxdWVzdHMgaW4gZXJyb3Igc3RhdGVzXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE1hbmFnZW1lbnQgQVBJXG5cdFx0Y2hlY2s6IGhvdENoZWNrLFxuXHRcdGFwcGx5OiBob3RBcHBseSxcblx0XHRzdGF0dXM6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRpZiAoIWwpIHJldHVybiBjdXJyZW50U3RhdHVzO1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0dmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblxuXHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG5cdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gdHJhY2tCbG9ja2luZ1Byb21pc2UocHJvbWlzZSkge1xuXHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdFx0XHR3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHZhciBibG9ja2VyID0gYmxvY2tpbmdQcm9taXNlcztcblx0YmxvY2tpbmdQcm9taXNlcyA9IFtdO1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoYmxvY2tlcikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0c2V0U3RhdHVzKFwiY2hlY2tcIik7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0oKS50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRpZiAoIXVwZGF0ZSkge1xuXHRcdFx0c2V0U3RhdHVzKGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkgPyBcInJlYWR5XCIgOiBcImlkbGVcIik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXG5cdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0YmxvY2tpbmdQcm9taXNlcyA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXG5cdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoXG5cdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRrZXlcblx0XHRcdCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHR1cGRhdGUuYyxcblx0XHRcdFx0XHR1cGRhdGUucixcblx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyxcblx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdFx0XHR9LFxuXHRcdFx0W10pXG5cdFx0KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkoYXBwbHlPblVwZGF0ZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cblx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0YXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKTtcblxuXHR2YXIgcmVzdWx0cyA9IGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLm1hcChmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdHJldHVybiBoYW5kbGVyKG9wdGlvbnMpO1xuXHR9KTtcblx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSB1bmRlZmluZWQ7XG5cblx0dmFyIGVycm9ycyA9IHJlc3VsdHNcblx0XHQubWFwKGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRyZXR1cm4gci5lcnJvcjtcblx0XHR9KVxuXHRcdC5maWx0ZXIoQm9vbGVhbik7XG5cblx0aWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG5cdFx0c2V0U3RhdHVzKFwiYWJvcnRcIik7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3JzWzBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG5cblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmRpc3Bvc2UpIHJlc3VsdC5kaXNwb3NlKCk7XG5cdH0pO1xuXG5cdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2Vcblx0c2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cblx0dmFyIGVycm9yO1xuXHR2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG5cdH07XG5cblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuYXBwbHkpIHtcblx0XHRcdHZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTtcblx0XHRcdGlmIChtb2R1bGVzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuXHRpZiAoZXJyb3IpIHtcblx0XHRzZXRTdGF0dXMoXCJmYWlsXCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGxpc3QpIHtcblx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBsaXN0O1xuXHRcdH0pO1xuXHR9XG5cblx0c2V0U3RhdHVzKFwiaWRsZVwiKTtcblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xufVxuXG5mdW5jdGlvbiBhcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHtcblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdGlmICghY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMpIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gdW5kZWZpbmVkO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGVhanNcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0gJiZcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZCAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IV9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdHZhciBhY2NlcHRDYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIG8gPSAwOyBvIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgbysrKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW29dO1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpdGVtLnJlcXVpcmUobW9kdWxlSWQpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSk7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yTSA9ICgpID0+IHtcblx0aWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0OiBuZWVkIGZldGNoIEFQSVwiKTtcblx0cmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuXHRcdGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSByZXR1cm47IC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcblx0XHRpZighcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHR9KTtcbn07XG5cbi8vIG5vIGRlZmVycmVkIHN0YXJ0dXBcblxuLy8gbm8ganNvbnAgZnVuY3Rpb25cblxuLy8gbm8gZGVmZXJyZWQgc3RhcnR1cCIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGVcbl9fd2VicGFja19yZXF1aXJlX18oMzQxKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=